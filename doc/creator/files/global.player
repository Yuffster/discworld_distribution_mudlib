
Inherit chain

/global/player +
	       |
	       +--- /std/living/living
	       |
	       +--- /std/living/handle
	       |
	       +--- /global/psoul +
	       |		  |
	       |		  +-- /global/alias
	       +--- /global/guild-race
	       |
	       +--- /global/wiz_cmd_normal
	       |
	       +--- /std/smart_log
	       |
	       +--- /global/last

void move_player_to_start(string bong, object bing, int gender)
.SP 10 5
Is called when you log on.  It should not need to be called
at any other time.

void start_player()
.SP 10 5
Adds all the commands onto the player object.  called
from move_player_to_start.
.EP
void public_commands()
.SP 10 5
All the commands that every one gets.  this includes the
soul and aliases.
.EP
int invent()
.SP 10 5
Does the players inventory. basicly it calls
query_contents and nothing else.
.EP
int look_me(string arg)
.SP 10 5
The look command.
.EP
string short(int dark)
.EP 10 5
Short description of the object. showing what you are
editing amongsth othert things.
.EP
void set_max_social_points(int num)
.SP 10 5
Sets your maximun scoial points to num. Socialpoints are
used for tells and shouts.
.EP
int query_max_social_points()
.SP 10 5
Retruns the players current social point status
.EP
void set_social_points(int num)
.SP 10 5
Sets current number of social points to num
.EP
int query_social_points()
.SP 10 5
Reyturns the current social point status
.EP
int adjust_social_points(int num)
.SP 10 5
Adjusts the social points by num
.EP
int score(string str)
.SP 10 5
Prints out the players score.  Can be used to see what
other players scores are. call score() everone is always
fun.
.EP
int save()
.SP 10 5
saves the player object.  You shouldnt actually call
this your self.  But I am documenting it to say that
when the player object is saved the functions
player_save are called on the players current guild and
race object.
.EP
int quit()
.SP 10 5
If you want to force someone to quit... this is how to
do it.  It creates the auto_load array, calls the
functions player_quit on the players current guild and
race object.
.EP
string query_title()
.SP 10 5
Returns the players title.
.EP
void set_title(string str)
.SP 10 5
Sets the players title to str
.EP
string query_gtitle() 
.SP 10 5
Returns the guild objects title.  This calls the
function query_title on the players guild object.
.EP
string query_atitle()
.SP 10 5
Returns the alingment title.
.EP
void set_atitle(string str)
.SP 10 5
Sets the alignment title
.EP
int query_deaths()
.SP 10 5
querys the number of time the player has died (useful
huh??)
.EP
int query_max_deaths()
.SP 10 5
Returns the maximun number of times the player can die.
.EP
int adjust_max_deaths(int i)
.SP 10 5
Adjusts the maximun number of times the player can die.
Returns the new value.
.EP
string query_stime()
		Returns the time we were last saved in string format,
		wow running it through ctime was sooo hard.
void set_name(string str)
		Sets the name of the object.  You can only ever call
		this once. the first time you log on. so it is not of
		much use to you. Thats right guys you cant change your
		name to be someone else, sad huh.
string long(string str, int dark)
		Returns the long description of the player.  if the arg
		passed is soul it calls the function query_long on
		"/std/handles/soul".  The long is made up of the short
		of the player plus the players describe string and whatever
		the race object returns with a query_desc on it.  The
		extra_look stuff is also calculated and added on along
		with the players inventory.
void set_desc(string s)
		Sets ths players desribe string.
string query_desc()
		Querys the players describe string.
int second_life()
		This routine is called when the player dies.  It stops
		everyone fighting them. Saves them sets up the death
		shadow and tells death we have died.  It also calls the
		functions player_died on both the race and guild
		objects.
void remove_ghost()
		Brings you back from the dead.
void heart_beat()
		Well this is the players main heart_beat.  It checks for
		idle time, does the players attacks and spells, checks
		to see if we should save the player or not and calls the
		functions player_heart_beat on the race and guild
		objects. with the paramater of intox.
int query_invis()
		Returns weather or not the player is invisible.
string *create_auto_load()
		Returns the auto_load string from the object in the
		players inventory. The function query_auto_load on the
		objects that are being referenced can return anything
		useful as the paramater.  The file name that is load is
		the file name of the object which gets the right
		query_auto_load.
void load_auto_load(string *auto_string)
		loads up and clones the objects in the auto load string.
		called in move_player_to_start.
void set_rows(int i)
		Sets the number of rows on the players screen.  This is
		used by more and other such things.
int query_rows()
		returns the length of the players screen.
void set_cols(int i)
		Sets the number of columns on the screen.
int query_cols()
		Returns the width of the players screen, this is used in
		many places basicly anywhere that prints formated output
		to the screen.  See also printf.
int query_creator()
int query_wizard()
		Returns weather or not we are a creator/wizard. The game
		driver has some query_wizards hard coded.
int query_lord()
                Returns true if we are a lord.  Bing huh?
int query_god()
                I will give you three guesses.
int query_app_creator()
		are we an apprentice creator? good question.
int pay_money(mixed *m_array)
		Makes the player object pay the money in the money
		array.  This is used by the shops etc.
int show_spells(string str)
		Pretty simple procedure to give you a list of the
		current spells the player knows
int cast(string str)
		casts a spell.  Eeeekkk.  It calls the function
		spell_func on the spells_object with the paramaters that
		came after the spell name on the command line
mapping query_spells()
		Returns the spell mapping.  The spell array is of the
		format ([ name : ({ ob, func }), ... ])
int add_spell(string name, mixed ob, mixed func)
		Adds a spell into the know list on the player object.
		When the spell is cast the function func is called on
		the object ob.  Becareful this is save_objected, so dont
		use object references use file_names
int remove_spell(string name)
		Removes the spell of name off the player object.
int query_spell(string type)
		returns the spell array for the given name ({ ob, func }).
string help_spell(string str)
                returns the help string if it succeed or 0 if it fails.
                The help string is generated by calling the function
                help(spell name) on the spells object.
void set_race_ob(string str)
		Sets the race object to str.  This is save objected so
		use file names.
string query_race_ob()
		Returns the current guild object defined on the player
void set_guild_ob(string str)
		Sets the guild object to str.  This is save objected so
		use file names.
string query_guild_ob()
		QUerys the guild object set on the player.
void set_al(int i)
		Sets the alignment if the player to i.
int query_al()
		Querys the current players alignment.
int adjust_align(int i)
		adjusts the current players alignment by i and change
		the alingment string.  Used in combat when a monster
		dies.
string query_birthday()
		Returns a string that is the players birthday.
int query_time_on()
		Querys the players age
int query_last_joined_guild()
		Querys when the player last joined a guild.
int check_dark(int light)
		This function calls the function query_dark on the race
		object to see if it is dark for the player.
int query_level()
		Returns the players level.  This is done by querying the
		guild object with the function query_level();
object query_snoopee()
		querys who you are snooping.
