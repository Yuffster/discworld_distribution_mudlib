Inheritance map for /std/object
 
/std/object +
            |
            +--- /std/basic/id
            |
            +--- /std/basic/read_desc +
            |                         |
            |                         +--- /std/basic/desc
            +--- /std/basic/misc +
            |                    |
            |                    +--- /std/basic/move
            +--- /std/basic/property
            |
            +--- /std/basic/money
            |
            +--- /std/basic/print_object
 
 
inherit /std/basic/id
 
void set_name(string)
                   Sets the name of the object to name.  This is the default
                   short description for the object and is used to identify
                   the object
string query_name()
                   Returns the name of the object
void add_alias(mixed)
                   Sets up an alias for the object.  An example of this is
                   if you have a sword, which you want to be called 'harry'.
                   You set_name("harry") and add_alias("sword") then the
                   object will respond to both "harry" and "sword"
                   Can take a string or an array of strings.
void set_main_plural(string)
                   Sets the main plural, this is used in the pretty
                   printing of inventorys as the default plural name.
                   ie Two Harrys.
void add_plural(mixed)
                   Sets up plurals that the object ids to.  In the above
                   example "harrys" would be set as the main_plural and
                   you would add_plural("swords") so that the object can
                   be identifyed as get all swords.
void add_adjective(mixed)
                   Used to set up the adjectives for the object.  If you
                   set the adjectives up, they can be used in conjunction
                   with any of the names or aliases (plurals) to reference
                   the item uniquely.  ie add_ajective( ({ "red", "long" }) )
                   now you can referance our object as get red harry
                   or get red long sword
string query_plural()
                   Returns the main plural of the object.
string pretty_plural()
                   The plural used in the cute inventorys of objects.  It
                   defaults to using query_plural()
string *query_plurals()
                   Returns all the plurals defined for the object
string *query_aliases()
                   Returns all the aliases defined for the object
string *query_adjectives()
                   Returns all the adjectives defined for the object
int id(string)     Returns 1 if you are referenceing this object
string *parse_command_id_list()
string *parse_command_plural_list()
string *parse_command_adjective_list()
                   Are used by parse_command (find_match) to match the
                   object.  Do not play with these unless you know what
                   you are doing.
 
inherit /std/basic/desc
void set_short(string)
                   Sets the short description of the object, this is used
                   for the singulars in the pretty print and is also
                   used quite often when drop things/etc.
void set_long(string)
                   Sets the long description of the object.  This is the
                   description the player gets when they look at the object
string query_short()
                   Returns the short descrition of the object
string query_long()
                   Returns the long  description of the object (unadulterated)
string long()      Returns the long description of the object.  This is the
                   function that is actually used by the look routines when
                   looking at an object.  So alll sorts of processing goes on
                   in here.
string pretty_short()
                   Used by the pretty inventory routines.  It default to
                   printing the short of the object.  Only useful if you
                   want to do strange things in the invertory of an object.
 
inherit /std/basic/read_desc
void set_read_mess(string)
                   Sets the message you get when the player reads the object.
                   If this is non-zero, the player will get the message,
                   "There appears to be something written on it" when they
                   look at the object.  If you set the describe with a 
                   $$file_name$$ in it, it will insert the contents of
                   the file at that point in the read desc.  ie
                   set_read_mess("A wonderfull furry thingy.\n"+
                                 "$$/doc/create/std.object$$.\n");
string query_read_mess()
                   returns the currently set read message
int do_read()      Is the function that is called when the object is tryed to
                   be read.  Returns 1 on success or 0 on failure.
void init()        init is defined in this object... so ::init must be
                   called.
 
inherit /std/basic/move
varargs int move(object|string, string|0, string|0)
                   This moves the object to the given destination with
                   the given messin and messout.
                   ie ob->move("/room/am/mendeddrum",
                               ob->short()+"pops off for a quicky",
                               ob->short()+"pops in for a quick beer");
void set_get()     Allows the object to be gettable.  All objects default
                   to being gettable.
void reset_get()   Means that you cannot type get frog and get it.  Makes the
                   object ungetable
void set_drop()    Makes the object dropable
void reset_drop()  Makes the object undropable
 
inherit /std/basic/misc
void set_weight(int)
                   Sets how much the object weighs.  This is used to
int query_weight() Returns how much the object weighs.  See /doc/create/weight
                   for information on how much an object should weigh.
 
inherit /std/basic/property
void add_property(string, mixed)
                   Sets the property with the appropriate value ie
                   set_property("frog", "pinkfish");
                   The value you are setting it too can be anything
mixed query_property(string)
                   Returns the value the property was set too.
int remove_property(string)
                   Removes the property off the object.
                   Returns 1 if it was sucessfuly removed.
mixed *query_propertys()
                   Returns the complete list of propertys and their values
                   The arrray is returned in this format
                   ({ name, ({ value }), name2, ({ value2 }), ... })
 
inherit /std/basic/money
int adjust_money(int, string)
                   Adds the amount of money given onto the value of the object
                   ie adjust_money(200, "copper");
                   The default coinage is copper.  Returns the current amount
                   of the coin added in the array.
mixed *query_money_array()
                   Returns the money array... The money array is of the form
                   ({ type, amount, type2, amount2 ... }) ie
                   ({ "copper", 100, "silver", 10 })
void set_money_array(mixed *)
                   Sets the money array to the given value.
int query_value()  Returns the total value of the object in brass coins,
                   using the values set in /std/money_handler
 
inherit /std/basic/print_object
void print_object(mixed)
                   Prints the argument out in a useful format, ie it expands
                   arrays and show you all the indexs etc.  Is very useful
                   for debuging.
 
In /std/object itself there is one procedure
void set_name(string)
                   This will set the short of the object to capitalise(name)
                   and the plural to the same thing.  You cannot set_name more
                   than once.
