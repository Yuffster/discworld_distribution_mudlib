void set_store_room(mixed ob)
		Sets the storeroom to the given object.  The store room
		is where all the objects sold to the shop are kept.
object query_store_room()
		Returns the shops storeroom.
void set_sell_message(mixed str)
void set_buy_message(mixed str)
void set_value_message(mixed str)
void set_browse_message(mixed str)
void set_list_message(mixed str)
		Very cute functions.. These allow you to set the message
		that is told to the person and to every one in the shop.
		The format of the thing passed is a string if both the
		message to the person and everyone else is the same or
		an array containing both messages.  Eg
		set_sell_message( ({ "Fred says: Here take this $ob$.\n"+
                    "Fred says: I dont want it anymore, so I am selling it "+
                         "you cheap for just $money$.\n"+
                    "Fred gives $ob$ to you.\n",
		    "Fred says to $client$: Here take this $ob$.\n"+
                    "Fred says to $client$: I dont want it anymore, so I am "+
                         "selling it you cheap for just $money$.\n"+
                    "Fred gives $ob$ to $client$.\n" });
		There are three things which are expanded in the arrays.
		The $ob$ is expanded to the short of the object, the
		$money$ is expanded to the cost, or the amount recieved
		for it, $client$ is expanded to the players name (short)
		and $extra$ is expanded to any extra information passed.
		The extra field is only used in the browse mwssage for
		the long of the object.
mixed query_sell_mess()
mixed query_list_mess()
mixed query_value_mess()
mixed query_buy_mess()
mixed query_browse_mess()
		Returns what the messages are set to.  See above for
		details of they can be set to.
void set_open_condition(mixed str)
		The open condition sets up when the shop will and wont
		sell things to you.  If it is set to a string the
		function of that name is called on the shop object to
		determine if the shop is open or not.  If the function
		returns a zero it is closed.  If the condition is set to
		an array it calls the function open_cond[1] on
		open_cond[0].  ie 
		set_open_cond("/d/sur/for/shop", "fred_dead");
		Will call the function fred_dead on the object
		/d/sur/for/shop.  Incidently that shop has all the
		messages set to strange things if you want a look at it.
mixed query_open_condition()
		Returns the array or string as specifed by a
		set_open_condition
int sell(string str)
		This does the actuall selling of the objects.  Called
		with the string to sell.  This is the function that is
		add_actioned
int buy(string str)
		This does the buying of objects.  This also the
		functioned add_actioned.
void do_buy(object ob)
		Does the actual buying thingy.  Was called_outed at one
		stage to stop too long evals, but it looked weird so it
		has been put back into the main loop.
int list(string str)
		Does the list of objects in the shops store room.
int browse(string str)
		Go on guess.
int value(string str)
		I really bet you cant figure this one out.
string shop_list(mixed arr)
		The internal shop listing function.  Returns the string
		which looks like One 10 copper coin frog.
		etc.  Is passed the array of object to work on, or is
		passed the object which to get an inventory of and
		value.
void do_parse(mixed arr, object ob, object client, string money,
                         string extra)
		This is the function that handles all the cute messages
		printed on the screen when things are bought and so on.
[als stuff 22-Jan-93]
int scaled_value(int n)
                Uses the PAY_RATES array in /include/shop.h to scale
                as appropriate. The 'sell' and 'value' functions
                call this on "/std/shop" rather than on itself so that any
                changes made to the PAY_RATES array, followed by an update
                to /std/shop will autmoatically affect all shops.  The
                PAY_RATES array looks like ({ amount1, rate1, amount2,
                rate2 ... amountn, raten }) this pays rate1% of amount1 +
                rate2% of amount2 etc up to 'n'.  Be careful.  It is
                relatively trivial to start paying out billions of
                coins if you accidentally leave a number out of sequence.
