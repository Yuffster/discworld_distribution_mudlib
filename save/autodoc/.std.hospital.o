#/obj/handlers/autodoc/autodoc_file.c
public_functions (["npc_path":({({"string",}),({({"string",}),"str",}),(["main":({"This method expands the path for the given npc by combining the npc_pathset in set_npc_path with the relative path defined in the configurationfile.",}),"return":({"the expanded path",}),"param":({"path the path to expand",}),]),}),"query_deities":({({"string","*",}),({}),(["main":({"This function returns an array of the gods in Ankh-Morpork<p>",}),]),}),"is_npc_under_max_population":({({"int",}),({({"string",}),"name",}),(["main":({"THis method checks to see if the number of npcs of thistype is under the maximum population.",}),"return":({"1 if is under, 0 if is not",}),"param":({"npc the npc to check to see if it is under population max",}),]),}),"set_max_cache":({({"void",}),({({"int",}),"num",}),(["main":({"This method sets the maximum number of transient npcs of a given typethat the hospital will cache. ",}),"param":({"num the maximum number",}),]),}),"hospital_log_file":({({"void",}),({({"string",}),"file",({"string",}),"format",({"mixed","*","args",}),"...",}),(["main":({"This method provides log_file() functionality but for /d/am/loginstead.  You should use this method to record errors and whateverthat are domain specific instead of using log_file().",}),"example":({"hospital_log_file(\"BAD_HOSPITAL_NPC\", \"%s: Bad NPC hospital data, %O.\\n\",ctime(time()), _regenerated_npcs);// This would log to /d/am/log/BAD_HOSPITAL_NPC.",}),"param":({"file the file name to log to. This will have /d/am/log/inserted before it.","format the text to log, can contain sprintf() format specifiers.","args the arguments for any sprintf format thingies",}),]),}),"load_npc_object":({({"object",}),({({"string",}),"npc_name",}),(["main":({"This method loads the specific npc.  It will do everything it needsto create the npc.  In the case of unique npcs they are not cloned.",}),"return":({"the npc object",}),"param":({"npc_name the name of the npc to load",}),]),}),"get_item":({({"int",}),({({"object",}),"destination",({"string","*",}),"items",}),(["main":({"This function provides an interface to the armoury, selectingan item at random from the 'items' array and attempting toclone it.<p>Any items of jewellery, clothing, weapons, armour or scabbardsthat are available in the armoury can be accessed using thisfunction.<p>",}),"see":({"/obj/handlers/armoury",}),"return":({"1 if the item was successfully created, 0 if it was not.",}),"param":({"destination where to place the item that is fetchedfrom the armoury.","items an array of items, of which one will be selected,cloned, and then moved to destination.<p>",}),]),}),"make_unique":({({"int",}),({({"mixed",}),"who",}),(["main":({"This method returns whether or not it is time to regenerate aunique NPC. The regeneration time is controlled by the REGEN_TIME#define.<p>",}),"return":({"1 if it is time to make the unique NPC, or 0 if it is not.",}),"param":({"who this is the name or object reference of the NPC",}),]),}),"query_disable_npc_generation":({({"int",}),({}),(["main":({"This method returns the flag that disables the npc generation.",}),"see":({"set_disable_npc_generation",}),"return":({"the flag that disables the npc generation",}),]),}),"load_group_npcs":({({"object","*",}),({({"string",}),"group_name",}),(["main":({"This method creates the npcs for the specificed group of npcs.",}),"return":({"the npcs",}),"param":({"group_name the name of the group",}),]),}),"set_npc_path":({({"void",}),({({"string",}),"path",}),(["main":({"This method sets the directory for npcs.  The filename for npcs definedin the configuration files is realtive to this path.",}),"param":({"dir the director for npcs.",}),]),}),"scan_for_new_data":({({"int",}),({({"int",}),"force",}),(["main":({"This method scans through all the files and sees if anything haschanged.",}),]),}),"regen_after_death":({({"void",}),({({"object",}),"dead_npc",}),(["main":({"This method is called by the npc.death effect after an NPC that is handledby the hospital has died. It tells the room where it was generated tomake a new NPC and to all sorts of funky things.<p>This is not fully implemented yet.",}),]),}),"npc_died":({({"void",}),({({"object",}),"ob",}),(["main":({"This method is called when a specific npc dies so we can do sometracking on it.",}),"param":({"npc_ob the npc object",}),]),}),"set_data_directory":({({"void",}),({({"string",}),"dir",}),(["main":({"This method sets the directory to scan for new files. The data directorystores the configuration files for the hospital that define the zones,groups and npcs.",}),"param":({"dir the directory to scan for new files",}),]),}),"query_group_info":({({"class","group_info",}),({({"string",}),"group",}),(["main":({"This returns the group info class for the group in question.  THis shouldonly be used for debugging.",}),"return":({"the class of the group",}),"param":({"group the name of the group to get the info on",}),]),}),"query_debug_npc_info":({({"mapping",}),({}),(["main":({"This returns all the npcs in the debug data array.",}),"return":({"this returns the debug information for the npcs",}),]),}),"roll_dice":({({"int",}),({({"mixed",}),"die",}),(["main":({"This method rolls the dice, if a dice is specified.",}),"return":({"the actual number",}),"param":({"dice the dice or number",}),]),}),"reset_unique":({({"void",}),({({"string",}),"who",}),(["main":({"This method resets the unique status of the npc so it can be tested forloading over again.",}),"param":({"npc the name of the npc",}),]),}),"query_npc_max_population":({({"int",}),({({"string",}),"npc",}),(["main":({"This method returns the maximum population of this npc.",}),"return":({"the npc population",}),"param":({"npc the name of the npc",}),]),}),"load_random_npc":({({"object","*",}),({({"string",}),"zone",({"int",}),"wealth",({"int",}),"busy",}),(["main":({"This method randomly selects an NPC or a group of NPC's fromthe list of defined NPC's for the room/region.",}),"return":({"Returns a group of NPCs randomly selected.",}),"param":({"zone This is a zone (as defined in the configuration files).","wealth How wealthy this particular part of this zone is.","busy How busy this particular part of this zone is.",}),]),}),"query_data_directory":({({"string",}),({}),(["main":({"This method returns the directory to scan for new files.",}),"see":({"set_data_directory()",}),"return":({"the directory to scan new data",}),]),}),"query_npc_current_population":({({"int",}),({({"string",}),"npc",({"int",}),"clean",}),(["main":({"This method returns the current population of this npc",}),"return":({"the npc population",}),"param":({"npc the name of the npc",}),]),}),"query_save_file":({({"string",}),({}),(["main":({"This returns the location where hospital data will be stored.",}),"see":({"set_save_file()",}),]),}),"is_group_under_max_population":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the number of npcs of thistype is under the maximum population.",}),"return":({"1 if is under, 0 if is not",}),"param":({"npc the npc to check to see if it is under population max",}),]),}),"query_npc_info":({({"class","npc_info",}),({({"string",}),"npc",}),(["main":({"This returns the npc info class for the npc in question.  THis shouldonly be used for debugging.",}),"return":({"the class of the npc",}),"param":({"npc the name of the npc to get the info on",}),]),}),"set_disable_npc_generation":({({"void",}),({({"int",}),"value",}),(["main":({"This method sets the flag which enables or disables npc generation. Thisis mostly used for debugging.",}),"param":({"value the new value of the flag",}),]),}),"query_registered_npcs":({({"string","*",}),({}),(["main":({"This function returns the ids of all the NPCs which are registered with the hospital, ie the ones that have to be specified with add_hospital_npc().",}),"return":({"All the ids.",}),]),}),"do_report":({({"int",}),({}),(["main":({"Prints a report of all the npcs in the hospital currently.",}),]),}),"set_domain":({({"void",}),({({"string",}),"domain",}),(["main":({"This method sets the domain string used when requesting thingsfrom the hospital.",}),"param":({"domain the domain name",}),]),}),])
protected_functions (["finish_compiling":({({"void",}),({({"string",}),"fname",({"mapping",}),"data",}),(["main":({"This is called by the data compiler when the system hasfinished compiling the data file.",}),"param":({"data the data to deal with",}),]),}),"set_save_file":({({"void",}),({({"string",}),"new_save",}),(["main":({"This method is used to set the save file for the hospital.  Thisfile is where all of the hospitals NPC data is stored while it isnot active and in between reboots.<p>If this file does not exist when the hospital is loaded, then thevariables will be initialised to their defaults and<b>restore_default_npcs()</b> called.<p>",}),"param":({"new_save the file name to save the hospital data in",}),]),}),"set_log_directory":({({"void",}),({({"string",}),"new_dir",}),(["main":({"This method sets the directory in to which hospital_log_file willlog by default. If the directory does not exist, then it is set toDEFAULT_LOG_DIRECTORY.",}),"example":({"set_log_directory( \"/d/cwc/Bes_Pelargic/log\" );// log directory is now /d/cwc/Bes_Pelargic/log","// (cre) MacChirton: ithinkmykeyboardisbrokenset_log_directory( \"/d/cWc/BeS_pelarGic/lrg\" );// Displays: \"/d/cwc/hospital/bes_pelargic: Invalid log// directory, defaulting to /log\"",}),"param":({"new_dir the directory to log to.",}),]),}),])
inherits (["/std/hospital/alignment":({}),"/std/room":({}),])
main_docs (["main":({"","This is a generalised hospital inheritable for the creation of NPCs.<p>The NPCs within the hospital are defined in the configuration files whichare parsed by the hospital. The configuration files can define zones,groups and npcs.<p>A zone is a region of the mud. It can have any name you choose and is thenused as the first parameter to load_random_npc(). A zone may be made up ofother zones, groups and npcs.<p>A group is a group of NPCs. It may be made up of other groups and npcs. Agroup has a name by which it is referenced by zones and other groups.<p>An npc is the definition of a specific type of NPC.",}),"author":({"Taffyd",}),"changed":({"Ceres November 14th 2002<br>Altered to work as a hospital for terrain NPCs especially the transientones. It now handles transient npcs as well as conditions fordiurnal, nocturnal and seasonal npcs.","Pinkfish March 10th<br>Major rewrite of bits to make it use a lisp like data file format.","Carmine April 9th<br>Added some alignment-generation code.",}),"example":({"A typical hospital setup would look like this:void setup() {  set_save_file(SAVE + \"/hospital\");  set_data_directory(DATA + \"/hospital\");  set_log_directory(LOG + \"/hospital\");  set_npc_path(CHARS + \"/hospital\");  set_not_replaceable(1);  set_short(\"Our hospital\");  set_long(\"This is the hospital.\\n\");}","These are examples of zones, groups & npcs.(zone  (name \"desert\")  (busy 5)  (group    (name \"vultures\")    (chance 1)  )  (npc    (\"name \"lizard\")    (chance 1)  ))(group  (name \"vultures\")  (transient \"true\")  (npc    (name \"vulture\")    (quantity 1 + 1d5)  ))(npc  (name \"vulture\")  (path \"vulture\")  (transient true))(npc  (name \"lizard\")  (path \"lizard\")  (transient true)  (diurnal true))The above configuration file defines a zone \"desert\". The zone has abusiness factor of 5 which means rooms in the zone will typically get achance at cloning npcs 5% of the time (every 20 rooms).<p>The zone is made up of a group called \"vultures\" and an npc called\"lizard\".<p>The vultures group is transient (ie. the NPCs will be removed from theroom when the player leaves the room, rather like wandering monsters) andcontains 1 + 1d5 \"vulture\" npcs.<p>The vulture NPC is transient and can be found in the filename \"vulture.c\" inthe path defined by set_npc_path(). The lizard NPC is also transient anddiurnal (it only comes out during the day) and can be found in the filename\"lizard.c\" in the path defined by set_npc_path().<p>",}),"started":({"December 3, 1998.",}),"index":({"hospital",}),])
define_docs (["CREATE_NPCS":([]),])
includes (["/include/weather.h":1059516193,"/include/hospital.h":1059516191,"/include/armoury.h":1059516192,"/include/data.h":1059516193,])
class_docs ([])
file_name "/std/hospital.c"
last_changed 1059516249
