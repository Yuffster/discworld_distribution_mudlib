#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_empty_mess":({({"string",}),({}),(["main":({"",}),"return":({"String empty_mess",}),]),}),"query_max_fuel":({({"int",}),({}),(["main":({"",}),"return":({"The max amount of fuel the object can contain.",}),]),}),"set_lit":({({"int",}),({({"int",}),"i",}),(["main":({"This function is used to light or dowse the lightable.Two properties are checked: unextinguishable means thatthe lightable cannot be extinguished and unlightable thatit cannot be lit.",}),"return":({"The current state, 1 for lit, 0 for unlit",}),"param":({"i 1 for lit and 0 for unlit",}),]),}),"set_fuel_messages":({({"void",}),({({"mixed",}),"msgs",}),(["main":({"This function is used to set the different messages showndepending on how much fuel is left in the lightable.The fuel messages should be on a form suitable to beappended to the_short() +\" is lit/not lit.  \"The argument msgs can either be an array of strings or anarray of string, int pairs.  In the first case, the fuelmessages will be evenly spaced.  In the second case, theint is a percentage (fuel_left*100/max_fuel) below whichthe string will be used.  If no message for 100 is given,it will default to the last string element in the array.",}),"example":({"    set_fuel_messages( ({ \"There is almost no fuel left.\", 10                          \"It is more than halfway empty.\", 50,                          \"It is not yet halfway empty.\", 80,                          \"It is almost full.\", 100 }) );",}),"param":({"msgs A mixed array of either strings or string, int pairs",}),]),}),"set_hold_required":({({"void",}),({({"int",}),"hands",}),(["main":({"",}),"param":({"hands The number of hands required to hold the object when litAny non-zero value will cause the ho_ld command to be executed,so use set_no_limbs( 2 ) as usual for two-handed weapons.I guess what I'm really trying to say is that a 0 will not requirethe object to be held and any other value will.In winter darkness<br>Gruper lights a cheerful flame<br>It smells like honey<br>",}),]),}),"query_fuel_messages":({({"mixed",}),({}),(["main":({"",}),"return":({"a mapping containing all the different fuel_messages",}),]),}),"query_hold_required":({({"int",}),({}),(["main":({"",}),"return":({"number of hands required to hold object when lit",}),]),}),"query_fuel":({({"int",}),({}),(["main":({"",}),"return":({"The current amount of fuel.",}),]),}),"set_fuel":({({"void",}),({({"int",}),"i",}),(["main":({"Sets the current amount of fuel.  One fuel unit equalsone second of burning time.  If fuel > max_fuel,fuel = max_fuel, so it is important to set max_fuelbefore fuel.",}),]),}),"set_empty_mess":({({"void",}),({({"string",}),"msg",}),(["main":({"The empty message is a string used to describe the lightablewhen it is out of fuel.  It should be on the form\"is burnt to a stub.\" to fit both the_short() +\" \"+ msgand \"It \"+ msg.",}),]),}),"query_brightness":({({"int",}),({}),(["main":({"",}),"return":({"How brightly the object shines when lit",}),]),}),"query_lit":({({"int",}),({}),(["main":({"",}),"return":({"1 if lit, 0 if unlit",}),]),}),"current_fuel_message":({({"string",}),({}),(["main":({"",}),"return":({"String describing how much fuel is left.",}),]),}),"set_max_fuel":({({"void",}),({({"int",}),"i",}),(["main":({"Sets the maximum amount of fuel.One fuel unit equals one second of burning time.",}),]),}),"set_brightness":({({"void",}),({({"int",}),"i",}),(["main":({"The brightness is the number used in set_light(),ie how brightly the lightable shines when lit.",}),]),}),])
protected_functions ([])
inherits (["/obj/weapon":({}),])
main_docs (["main":({"","This is the standard lightable.  It can be used for candles,lanterns, lamps etc.  It adds the commands \"light\" and\"dowse\"/\"extinguish\" to the player, but no refuellingcommand.  Holding stuff is handled by /obj/weapon and theho_ld command.",}),"author":({"Gruper",}),"started":({"11th of May, 1998",}),"index":({"lightable",}),])
define_docs (["HOLD_COMMAND":([]),"DEPARTURES":([]),])
includes (["/include/fuel_handler.h":1059516192,])
class_docs ([])
file_name "/std/lightable.c"
last_changed 1059516249
