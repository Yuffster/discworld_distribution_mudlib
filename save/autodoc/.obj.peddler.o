#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_in_combat_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the peddler being in combat and hence unableto sell his wares!",}),"param":({"s the chat to replace the default with",}),]),}),"set_too_poor_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the player being too poor to buy an item",}),"param":({"s the chat to replace the default with.  Must include $item$, whichwill be replaced by the item short.",}),]),}),"set_list_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat to announcing the stock list",}),"param":({"s the chat to replace the default with",}),]),}),"sell_thing":({({"void",}),({({"object",}),"player",({"object",}),"thing",}),(["main":({"The main entrace to the sell stuff command.",}),"return":({"1 on success, 0 on failure",}),]),}),"query_cost":({({"int",}),({({"object",}),"thing",({"object",}),"buyer",}),(["main":({"This method returns the cost of the specified item to the buyer.",}),"return":({"the cost of the item",}),"param":({"thing the thing to cost","buyer who is buying it",}),]),}),"set_no_stock_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default reply to having no listable stock",}),"param":({"s the chat to replace the default with",}),]),}),"set_too_heavy_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the player being too burdened to carry anitem",}),"param":({"s the chat to replace the default with.  Must include $item$, whichwill be replaced by the item short.",}),]),}),"set_all_out_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the item being out of stock when a playertries to buy it",}),"param":({"s the chat to replace the default with.  Must include $item$, whichwill be replaced by the item short.",}),]),}),"set_out_of_item_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of being out of an item that is browsed",}),"param":({"s the chat to replace the default with.  Must include $item$, whichwill be replaced by the item short.",}),]),}),"do_list":({({"int",}),({}),(["main":({"The main entrace to the list stuff command.",}),"return":({"1 on success, 0 on failure",}),]),}),"event_exit":({({"void",}),({({"object",}),"ob",({"string",}),"message",({"object",}),"to",}),([]),}),"set_none_left_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default reply to having none left",}),"param":({"s the chat to replace the default with",}),]),}),"event_enter":({({"void",}),({({"object",}),"ob",({"string",}),"mess",({"object",}),"from",}),([]),}),"set_list_item_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of listing a stock item's price and stock",}),"param":({"s the chat to replace the default with.  Must include $num_left$,$display$ and $cost$, which will be replaced by the appropriatestrings.",}),]),}),"do_buy":({({"int",}),({({"mixed",}),"indirect_obs",({"string",}),"dir_match",({"string",}),"indir_match",({"string","*",}),"words",}),(["main":({"The main entrace to the buy things command.",}),"return":({"1 on success, 0 on failure",}),]),}),"cost_string":({({"string",}),({({"object",}),"thing",({"string",}),"place",({"object",}),"buyer",}),(["main":({"This method returns the costs of the item as a string.",}),"return":({"the string money value",}),"param":({"thing the thing to buy","place the money area it is being bought in","buyer the person who is buying the object",}),]),}),"set_missing_punter_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat to the player having wandered off",}),"param":({"s the chat to replace the default with",}),]),}),"set_show_item_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of showing an item to a player",}),"param":({"s the chat to replace the default with.  Must include $item$ and$cost$, which will be replaced by the item short and the cost of the itemrespectively.",}),]),}),"do_browse":({({"int",}),({({"mixed",}),"indirect_obs",({"string",}),"dir_match",({"string",}),"indir_match",({"string","*",}),"words",}),(["main":({"The main entrace to the browse for things command.",}),"return":({"1 on success, 0 on failure",}),]),}),"set_busy_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the peddler being busy sellingsomething already.",}),"param":({"s the chat to replace the default with",}),]),}),"set_dont_sell_mess":({({"void",}),({({"string",}),"s",}),(["main":({"Overrides the default chat of the peddler not selling an item",}),"param":({"s the chat to replace the default with.  Must include $item$, whichwill be replaced by the item short.",}),]),}),])
protected_functions ([])
inherits (["/obj/monster":({}),"/std/shops/inherit/clone_on_demand":({}),])
main_docs (["main":({"This is the peddler object, it acts as a walking talking itemshop.Added event_enter so to stop food from decaying when the peddlersells it. Siel, October 2001",}),])
define_docs (["DISPLAY":([]),"NUM_SOLD":([]),"MAX_PROP":([]),"TYPE":([]),])
includes (["/include/money.h":1059516192,"/include/move_failures.h":1059516192,"/include/armoury.h":1059516192,"/include/virtual.h":1059516193,"/include/shops/bank.h":1059516191,])
class_docs ([])
file_name "/obj/peddler.c"
last_changed 1059516270
