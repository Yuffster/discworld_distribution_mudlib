#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_reg_skills":({({"mapping",}),({}),(["main":({"This method returns the all of the skills with their children and thenumber of children in a nice mapping.  The key of the mapping is the nameof the skill, the value is an array of two elements.  The first is anarray of all the children and the second is the number of childrenof the skill.",}),"return":({"the mapping as described above",}),]),}),"query_allowed_to_teach":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to see if this particular skill is allowed to betaught to people.",}),"return":({"1 if they are not allowed to teach it, 0 if they are",}),"param":({"str the skill to check",}),]),}),"query_no_bonus":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to see if the specified skill has no bonus associatedwith it.",}),"return":({"1 if there is no bonus, 0 if there is a bonus",}),"param":({"str the skill to check",}),]),}),"query_related_skills":({({"string","*",}),({({"string",}),"skill",}),(["main":({"This method also returns all the children of a skill.  It preformsexactly the same action as query_all_children()",}),"return":({"the children of the skill",}),"param":({"skill the skill to get the children of",}),]),}),"query_skill_cost":({({"int",}),({({"string",}),"skill",}),(["main":({"This method returns the cost of the specified skill.  This is thethe number of children it has.",}),"return":({"the costof the skill",}),"param":({"skill the skill to check the cost of",}),]),}),"query_skill_path":({({"string","*",}),({({"string",}),"skill",}),(["main":({"This method returns the path to skill.  This is essentially the skillname broken up on '.'s and returned as an array.",}),"return":({"the skill path, or 0 if the skill does not exist",}),]),}),"query_all_children":({({"string","*",}),({({"string",}),"skill",}),(["main":({"This method returns all the children of the specified skill.This does a deep children finding exercise, returing all the childrenas it goes lower and lower into the array.",}),"see":({"query_related_skills()",}),"return":({"all the children",}),"param":({"skill the skill to get the children of",}),]),}),"query_only_leaf":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines if only leaf skills can be increased in thisskill tree.  This is used for the other skill tree, to avoid increasingall the other skills at the same time.",}),"return":({"1 if the tree is only leaf, 0 if not",}),"param":({"str the skill tree to check",}),]),}),"query_skill_tree":({({"string","*",}),({({"string",}),"skill",}),(["main":({"This method returns the skill and all of its parents leading up toit.",}),"return":({"the skill tree of the skill",}),"example":({"query_skill_tree(\"magic.methods.physical.binding\")Returns: ({ \"magic.methods.physical.binding\", \"magic.methods.physical\", \"magic.methods\", \"magic\"})",}),"param":({"skill the skill to get the tree of",}),]),}),"query_skill_depth":({({"int",}),({({"string","*",}),"skill",}),(["main":({"This method returns the skill depth for teaching calculations.",}),"return":({"the skill depth",}),"param":({"skill the skill to get the depth of",}),]),}),"is_skill_ignored":({({"int",}),({({"string",}),"skill",}),(["main":({"This method returns 1 if the skill being asked about should be ignored.An ignored skill means that up to this point the fact it is this deepis ignored.  For example,if 'crafts' is ignored then 'crafts.smithing'would count as if it was a top level skill.",}),"param":({"skill the skill to check",}),]),}),"query_skill":({({"string",}),({({"string","*",}),"bits",}),(["main":({"This method attempts to figure out the path of a skill from an arrayof bits.  It verifies that the skill actually exists on the way.",}),"return":({"the path of the skill",}),"param":({"bits the skill to check",}),]),}),"query_immediate_children":({({"string","*",}),({({"string",}),"skill",}),(["main":({"This method returns the immediate children of the specified skill.",}),"return":({"the immediate children of the skill",}),"param":({"skill the skill to get the children of",}),]),}),"query_children":({({"string","*",}),({({"mixed","*",}),"arr",({"string",}),"path",}),(["main":({"This method returns the children of the specified skill chunk.You need to pass into this array a skill chunk as taken from theskill array.  It is recursive and returns all the internal childrenas well.",}),"return":({"the children of the skill chunk",}),"param":({"arr the skill chunk","path the skill bit leading up to this section",}),]),}),"query_skill_stat":({({"string",}),({({"string",}),"skill",}),(["main":({"This method returns the stats that effect the skill.",}),"return":({"the stats that effect the skill",}),"param":({"skill the skill to check",}),]),}),"query_only_show_if_non_zero":({({"int",}),({({"string",}),"str",}),(["main":({"This method checks to see if the skill should only be shown on theskill list if it is non-zero.",}),"return":({"1 if should only show non-zero skills, 0 if show any skill",}),"param":({"str the skill to check",}),]),}),"query_skills":({({"mixed","*",}),({}),(["main":({"This method returns the raw unfluffed skill array.  This is the sameas the skill array defined in /include/skills.h plus the language skillsand other dynamic skills added.",}),"see":({"/include/skills.h",}),"return":({"the skills array",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the skills handler.  It controls all the skills currently inthe game and keeps track of their various properties.",}),"author":({"Pinkfish",}),])
define_docs (["SKILL_BONUS":([]),])
includes (["/include/language.h":1059516192,"/include/skills.h":1059516192,])
class_docs ([])
file_name "/std/skills.c"
last_changed 1059516249
