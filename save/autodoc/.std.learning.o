#/obj/handlers/autodoc/autodoc_file.c
public_functions (["lesson_end":({({"int",}),({({"string",}),"name",({"object",}),"student",}),([]),}),"query_lessons":({({"string","*",}),({}),(["main":({"This method returns an array of the registered lessons.",}),"return":({"a list of lesson names.",}),]),}),"start_lesson":({({"int",}),({({"string",}),"name",({"object",}),"player",}),(["main":({"This method starts a lesson for a given player.",}),"param":({"the lesson name","the player",}),]),}),"has_required_skills":({({"int",}),({({"string",}),"name",({"object",}),"player",}),(["main":({"has_required_skills( string name, object player )Skills: Skills and skill levels which may be necessary to learn somethingFor instance, one should learn to walk before one learns to run.  If youdon't have sufficient skill levels in walking, you won't be able to learnhow to run.",}),"param":({"name name of the lesson they're trying to learn","player player object of the player trying to learn",}),]),}),"add_step":({({"int",}),({({"string",}),"lesson_name",({"string","*",}),"blurbs",({"string",}),"skill",({"int",}),"diff",({"string","*",}),"responses",({"string","*",}),"params",({"string",}),"award_mess",({"string",}),"succeed_mess",({"string",}),"fail_mess",}),(["main":({"Add a step to a lesson plan.  This is the interaction between student and teacher. One step should be defined for each thing you want the studentto learn.",}),"param":({"lesson_name the name of the lesson this lesson plan is associated with. ","blurbs An array of strings in order that they should be given during the lesson.  This is what the teacher says to the student. ', :, #, etc. can be used for say, emote and execute a command respectively.","skill The skill being learned.","difficulty The bonus level of the skill being learned.","responses An array of strings.  These are the expected responses to the teacher's blurbs.","params an array of strings given as arguments to the responses in order.","award_mess The string a player sees if they get a TM award during this step. Itshould not end in a newline \\n.","succeed_mess The string a player gets if they are successful in doing what the step asks.  It should not end in a newline \\n.","fail_mess A string telling the player that they've failed.  It should not end in a newline \\n.",}),]),}),"register_lesson":({({"int",}),({({"string",}),"name",({"mapping",}),"minimum_skills",({"mapping",}),"maximum_skills",({"string","*",}),"materials",({"int",}),"cost",({"string",}),"currency",({"string","*",}),"lesson_ending",({"object",}),"teacher",}),([]),}),"has_required_cash":({({"int",}),({({"string",}),"name",({"object",}),"player",}),(["main":({"has_required_cash( string name, object player )Give some, get some. Money makes a teacher more likely to teach you.",}),"param":({"name name of the lesson they're trying to learn","player player object of the player trying to learn",}),]),}),"lesson_response":({({"int",}),({({"string",}),"name",({"object",}),"student",({"int",}),"lessonstep",({"string",}),"args",}),([]),}),"has_required_materials":({({"int",}),({({"string",}),"name",({"object",}),"player",}),(["main":({"has_required_materials( string name, object player ) Materials: Materials are objects which are necessary for a student to learnsomething.  For instance, to learn to speak a language, you might needa textbook. To learn to ride a horse, you might want to require a helmet.",}),"param":({"name name of the lesson they're trying to learn","player player object of the player trying to learn",}),]),}),])
protected_functions (["lesson_step":({({"void",}),({({"string",}),"name",({"object",}),"student",({"int",}),"lessonstep",}),([]),}),])
inherits ([])
main_docs (["main":({"Register a lesson with the learning system.",}),"param":({"name the name of the lesson","minimum_skills a mapping of skill names & bonuses that are required in order to take this lesson","maximum_skills a mapping of skill names & bonuses that are the maximum allowed to take this lesson","materials a list items required in order to take the lesson","cost the price of the lesson","currency the name of the currency required for the lesson","lesson_ending an array of strings that happen at the end the lesson to end it","teacher an optional teacher object",}),])
define_docs ([])
includes (["/include/money.h":1059516192,"/include/shops/bank.h":1059516191,"/include/tasks.h":1059516192,])
class_docs (["lesson":({0,({({"minimum_skills",({"mapping",}),}),({"maximum_skills",({"mapping",}),}),({"materials",({"string","*",}),}),({"cost",({"int",}),}),({"currency",({"string",}),}),({"lesson_ending",({"string","*",}),}),({"teacher",({"object",}),}),({"plan",({"class","step","*",}),}),}),([]),}),"step":({0,({({"blurbs",({"string","*",}),}),({"skill",({"string",}),}),({"difficulty",({"int",}),}),({"responses",({"string","*",}),}),({"params",({"string","*",}),}),({"award_mess",({"string",}),}),({"succeed_mess",({"string",}),}),({"fail_mess",({"string",}),}),}),([]),}),])
file_name "/std/learning.c"
last_changed 1059516249
