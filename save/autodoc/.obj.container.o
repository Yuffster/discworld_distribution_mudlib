#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_volume_left":({({"int",}),({}),(["see":({"add_volume()","transfer_liquid_to()",}),"main":({"This method returns the amount of volume left for liquids to beadded into.",}),"return":({"the amount of volume left",}),]),}),"consistency_string":({({"string",}),({({"int",}),"cons",}),([]),}),"remove_volume":({({"int",}),({({"int",}),"vol_lost",}),(["see":({"add_volume()","query_volume()",}),"main":({"This method removes some volume of liquid from the container.",}),]),}),"query_parse_id":({({"object",}),({({"mixed","*",}),"arr",}),(["@ignore":({"yes ",}),]),}),"query_weight_left":({({"int",}),({}),(["main":({"This method returns the current amount of weight left that canbe filled on the container.",}),"return":({"the current amount of weight left",}),]),}),"fullness_adjectives":({({"string","*",}),({}),(["see":({"query_max_volume()",}),"main":({"This returns an adjective for how full the current object is withliquid.  This is used in the parse command handling code.",}),"return":({"the fullness adjective",}),]),}),"dest_active_contents":({({"int",}),({}),(["main":({"This method will destroy all the liquid contents of the object.",}),"return":({"the number of object destroyed",}),]),}),"contents_vect":({({"int","*",}),({}),(["main":({"This method returns the vector of the contents of the container.This is based on the vectors of all the liquid with a vector seton them.",}),]),}),"query_misc_attrs":({({"int","*",}),({}),([]),}),"query_all_attrs":({({"int","*",}),({}),([]),}),"transparency_string":({({"string",}),({({"int",}),"trans",}),([]),}),"empty_formula":({({"int",}),({}),(["main":({"This method returns the amount of the liquid you can actually emptyfrom a container.",}),"return":({"the amount of liquid that can be emptied",}),]),}),"set_ps_quantity":({({"void",}),({({"int",}),"n",}),([]),}),"set_max_volume":({({"void",}),({({"int",}),"i",}),(["see":({"set_max_weight()","add_volume()",}),"main":({"This method sets the maximum volume of the container.  This alsosets the maximum weight of the container to one tenth of thevolume (if there is not current maximum weight).",}),"param":({"i the new maximum volume",}),]),}),"query_ps_quantity":({({"int",}),({}),(["see":({"query_ps_coord()","set_ps_quantity()",}),"main":({"This method returns the quantity of liquid at the potion space.",}),"return":({"the quantity of liquid",}),]),}),"query_ps_coord":({({"int","*",}),({}),(["see":({"query_ps_quantity()",}),"main":({"This method returns the potion space co-ordinates of the liquid.",}),"return":({"the potion space co-ordinates",}),]),}),"query_water_volume":({({"int",}),({}),(["see":({"set_water_volume()",}),"main":({"This method returns the volume of water in the container.",}),]),}),"query_max_volume":({({"int",}),({}),(["main":({"This method returns the current maxium volume associated with thiscontainer.",}),"return":({"the current maximum volume",}),]),}),"set_water_volume":({({"void",}),({({"int",}),"n",}),(["main":({"This method sets the volume of water in the container.",}),"param":({"n the new volume of water",}),]),}),"parse_command_adjectiv_id_list":({({"string","*",}),({}),(["@ignore":({"yes ",}),]),}),"set_volume":({({"void",}),({({"int",}),"i",}),(["see":({"query_volume()","set_leak_rate()",}),"main":({"This method sets the current amount of liquid in the container.  Ifthe container has a leak rate, it starts to leak.",}),"param":({"i the new amount of liquid in the containe",}),]),}),"set_full_weight":({({"void",}),({({"int",}),"i",}),(["see":({"query_full_weight()","set_weight()",}),"main":({"This method sets the weight of the container when it is full.",}),"param":({"i the new weight of the containe when full.",}),]),}),"query_active_attrs":({({"int","*",}),({}),([]),}),"set_max_weight":({({"void",}),({({"int",}),"i",}),(["see":({"set_max_volume()","add_weight()",}),"main":({"This method sets the maximum weight of the container.  This also setsthe maximum volume of the container to 10 times its maximum weight.(If there is no current maximum volume).",}),"param":({"i the maxium weight of the container",}),]),}),"ensure_open":({({"int",}),({}),(["main":({"This method returns true if the object is open and prints a messageabout the open status of the object.",}),"return":({"1 if it is open, 0 if not",}),]),}),"query_volume":({({"int",}),({}),(["main":({"This method returns the current amount of liquid in the container.",}),"return":({"the current amount of liquid in the container",}),]),}),"query_leak_rate":({({"int",}),({}),(["see":({"set_leak_rate()",}),"main":({"This method returns the leak rate of the container",}),]),}),"transfer_liquid_to":({({"void",}),({({"object",}),"dest",({"int",}),"vol_misc",({"mixed","*",}),"misc",({"int",}),"vol_water",({"int","*",}),"coord",({"int",}),"quantity",}),(["main":({"This method does the actual liquid transfer, as needed by thefilling, emptying and pour operations.",}),"param":({"dest where the liquid is to go","vol_misc the volume of non-water to move","misc the attributes for the non-water","vol_water the volume of water to move","coord the co-ordinate of the liquid","quantity the quantity of the potion space liquid",}),]),}),"query_liquid_short":({({"string",}),({}),(["see":({"query_liquid_name()",}),"main":({"This method returns the short description of the liquid.",}),"return":({"the short description of the liquid",}),]),}),"test_add":({({"int",}),({({"object",}),"ob",({"int",}),"flag",}),(["see":({"/std/basic/move.c",}),"main":({"This method stops the container being added when it is closed.  It also handles the same flags as the liingobject.  We assume this is not the sameas the default containers usedby things like item rooms and such.",}),"param":({"ob the object being added","flag the addition flag",}),]),}),"query_full_weight":({({"int",}),({}),(["see":({"set_full_weight()","query_weight()",}),"main":({"This method returns the full weight of the container.",}),]),}),"query_frac_parse_id":({({"object",}),({({"mixed","*",}),"arr",}),(["@ignore":({"yes ",}),]),}),"liquid_name":({({"string",}),({}),(["main":({"This method returns the name of the current liquid inside the container.",}),"return":({"the name of the current liquid",}),]),}),"void_liquid":({({"void",}),({}),(["main":({"This method zaps all the liquid stuff in the container.",}),]),}),"set_leak_rate":({({"void",}),({({"int",}),"i",}),(["see":({"query_leak_rate()",}),"main":({"This method sets the leak rate of the container.  The leak rate is howfast stuff leaks out of the container.",}),"param":({"i the new leak rate of the container",}),]),}),"update_potion_parse":({({"void",}),({}),(["see":({"/secure/simul_efun->find_match()",}),"main":({"This method updates the values used for the find_match() parseingdue to the liquids.",}),]),}),"end_config":({({"void",}),({}),([]),}),"change_concentration":({({"mixed","*",}),({({"mixed","*",}),"potion",({"int",}),"new_conc",}),(["main":({"This method changes the concentration of the liquid to be a newand exciting concentration.",}),"param":({"potion the potion to change the concentration of","new_conc the new concentration of the liquid",}),]),}),"parse_command_id_list":({({"string","*",}),({}),(["@ignore":({"yes ",}),]),}),"config":({({"void",}),({({"int",}),"vari",({"mixed",}),"cont",}),([]),}),"set_misc_attrs":({({"void",}),({({"mixed","*",}),"new_misc_attrs",({"int",}),"misc_vol",}),([]),}),"stats":({({"mixed",}),({}),(["@ignore":({"yes ",}),]),}),"begin_config":({({"void",}),({}),([]),}),"merge_potions":({({"mixed","*",}),({({"mixed","*",}),"potion1",({"mixed","*",}),"potion2",({"int",}),"vol1",({"int",}),"vol2",({"int",}),"tot_vol",}),(["@ignore":({"yes ",}),]),}),"add_ps_vect":({({"void",}),({({"int","*",}),"v",({"int",}),"quant",}),(["main":({"This method adds a potion space vector with a particularquantity to the object.",}),"param":({"v the vector to add","quant the quantity to add",}),]),}),"mix_liq":({({"mixed","*",}),({({"mixed","*",}),"arr1",({"mixed","*",}),"arr2",({"int",}),"vol1",({"int",}),"vol2",({"int",}),"tot_vol",}),(["@ignore":({"yes ",}),]),}),"set_ps_coord_quantity":({({"void",}),({({"int","*",}),"new_coord",({"int",}),"new_quantity",}),(["main":({"This method sets the quantity of the position space co-ordinateto be the new quantity.",}),"param":({"new_coord the new co-ordinate of the liquid","new_quantity the new quantity of the liquid",}),]),}),"sort_func":({({"int",}),({({"int","*",}),"x",({"int","*",}),"y",}),(["@ignore":({"yes ",}),]),}),"check_breakages":({({"void",}),({}),(["see":({"/std/container->add_weight()",}),"main":({"This method checks to see if any of the things contained in thecontainer should be broken.",}),]),}),])
protected_functions ([])
inherits (["/std/container":({}),"/std/basic/close_lock_container":({}),])
main_docs (["see":({"/obj/vessel.c","/obj/clothing.c",}),"main":({"This is main container type object that players will use.  Forexample, buckets and stuff would use this.  A backpack would bea type of clothing and a potion bottle should be a vessel.",}),"author":({"Who knows, Pinkfish, Ember, Jeremy",}),])
define_docs (["TASTE_AMOUNT":([]),"MAX_INVENT":([]),])
includes (["/include/move_failures.h":1059516192,"/include/parse_command.h":1059516193,"/include/potion_attrs.h":1059516193,])
class_docs ([])
file_name "/obj/container.c"
last_changed 1059516270
